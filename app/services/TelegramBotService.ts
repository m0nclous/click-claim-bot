import type { Logger } from '@adonisjs/core/logger';
import { RedisService } from '@adonisjs/redis/types';
import app from '@adonisjs/core/services/app';
import { Context, Scenes, session, Telegraf } from 'telegraf';
import { parseBoolean } from '../../helpers/parse.js';

// @ts-expect-error –ø–æ—á–µ–º—É-—Ç–æ —Ä—É–≥–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ —á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –º–æ–¥—É–ª—å
import type { ExtraReplyMessage } from 'telegraf/typings/telegram-types';

// @ts-expect-error –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –Ω–æ –º—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º
import { MyChatMemberUpdate } from '@telegraf/types/update.js';
import { TelegramClient } from 'telegram';
import { TelegramService } from '#services/TelegramService';

export interface TelegramBotConfig {
    token: string;
}

export function defineConfig(config: TelegramBotConfig): TelegramBotConfig {
    return config;
}

export class TelegramBotService {
    public bot: Telegraf;

    constructor(
        public config: TelegramBotConfig,
        protected redis: RedisService,
        protected logger: Logger,
    ) {
        this.bot = new Telegraf(this.config.token);
    }

    public async run(): Promise<void> {
        this.bot.command('play', this.play.bind(this));
        this.bot.command('pause', this.pause.bind(this));
        this.bot.command('info', this.info.bind(this));

        interface ICallbackPromise<T> {
            promise: Promise<T>;
            resolve: any;
            reject: any;
        }

        function callbackPromise<T>(): ICallbackPromise<T> {
            let resolve: any;
            let reject: any;

            const promise: Promise<T> = new Promise((res, rej) => {
                resolve = res;
                reject = rej;
            });

            return { promise, resolve, reject };
        }

        const loginWizard = new Scenes.WizardScene(
            'login',
            async (ctx) => {
                this.logger.trace(ctx.update, 'Step 1: –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');

                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', {
                    reply_markup: {
                        keyboard: [[{ text: 'üì≤ Send phone number', request_contact: true }]],
                        one_time_keyboard: true,
                    },
                });

                return ctx.wizard.next();
            },
            async (ctx) => {
                this.logger.trace(ctx.update, 'Step 2: –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

                const state: {
                    telegram?: TelegramService;
                    client?: TelegramClient;
                    phoneNumber?: string;
                    codeCallback?: ICallbackPromise<string>;
                    passwordCallback?: ICallbackPromise<string>;
                    onLoginCallback?: ICallbackPromise<true>;
                } = ctx.wizard.state;

                if (ctx.message === undefined) {
                    return;
                }

                if (!('contact' in ctx.message)) {
                    return;
                }

                state.telegram = await app.container.make('telegram', [ctx.message.from.id]);
                state.client = await state.telegram.getClient();
                state.phoneNumber = ctx.message.contact.phone_number;
                state.codeCallback = callbackPromise();
                state.passwordCallback = callbackPromise();
                state.onLoginCallback = callbackPromise();

                const codePromise = state.codeCallback.promise;
                const passwordPromise = state.passwordCallback.promise;

                state.client
                    .start({
                        phoneNumber: state.phoneNumber,
                        password: async () => passwordPromise,
                        phoneCode: async () => codePromise,
                        onError: async (err) => {
                            this.logger.error(err);
                            return true;
                        },
                    })
                    .then(() => {
                        state.onLoginCallback?.resolve(true);
                    })
                    .catch(async () => {
                        await ctx.sendMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                        await ctx.scene.leave();
                    });

                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ <a href="https://t.me/+42777">Telegram</a>\n\n‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! –†–∞–∑–¥–µ–ª–∏ –∫–æ–¥ –ø—Ä–æ–±–µ–ª–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>1 2 3 4 5 6</code>, –∏–Ω–∞—á–µ –∫–æ–¥ –±—É–¥–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º!', {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–¥',
                                    url: 'https://t.me/+42777',
                                },
                            ],
                        ],
                    },
                });

                return ctx.wizard.next();
            },
            async (ctx) => {
                this.logger.trace(ctx.update, 'Step 3: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è');

                if (ctx.message === undefined) {
                    return;
                }

                if (!('text' in ctx.message)) {
                    return;
                }

                const state: {
                    client?: TelegramClient;
                    phoneNumber?: string;
                    codeCallback?: ICallbackPromise<string>;
                    passwordCallback?: ICallbackPromise<string>;
                } = ctx.wizard.state;

                const phoneCode: string = ctx.message.text.replaceAll(' ', '').trim();

                state.codeCallback?.resolve(phoneCode);

                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å Telegram');

                return ctx.wizard.next();
            },
            async (ctx) => {
                this.logger.trace('Step 4: —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Telegram Client');

                if (ctx.message === undefined) {
                    return;
                }

                if (!('text' in ctx.message)) {
                    return;
                }

                const state: {
                    telegram?: TelegramService;
                    client?: TelegramClient;
                    phoneNumber?: string;
                    codeCallback?: ICallbackPromise<string>;
                    passwordCallback?: ICallbackPromise<string>;
                    onLoginCallback?: ICallbackPromise<true>;
                } = ctx.wizard.state;

                const password = ctx.message.text;
                await ctx.deleteMessage(ctx.message.message_id);

                state.passwordCallback?.resolve(password);

                await state.onLoginCallback?.promise;
                await ctx.reply('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥');
                await state.telegram?.saveSession(state.client?.session.save() as unknown as string);

                return await ctx.scene.leave();
            },
        );

        const stage = new Scenes.Stage<any>([loginWizard], {
            default: 'login',
        });

        this.bot.use(session());
        this.bot.use(stage.middleware());

        loginWizard.use(async (ctx, next) => {
            // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            if ('my_chat_member' in ctx.update) {
                const updateInfo: MyChatMemberUpdate = ctx.update;

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ—Ç–∞
                if (['kicked', 'left'].includes(updateInfo.my_chat_member.new_chat_member.status)) {
                    this.logger.trace(updateInfo, '–ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

                    // –í—ã—Ö–æ–¥ —Å–æ —Å—Ü–µ–Ω—ã –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö middleware
                    return ctx.scene.leave();
                }
            }

            return next();
        });

        this.bot
            .launch(() => {
                this.logger.info(this.bot.botInfo, '–ß–∞—Ç-–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
            })
            .then();
    }

    public async isStarted(userId: number): Promise<boolean> {
        return parseBoolean(await this.redis.hget(`user:${userId}:bot`, 'started'));
    }

    public async play(ctx: Context): Promise<void> {
        if (!ctx.from?.id) {
            this.logger.error(ctx, '–ù–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            await ctx.reply('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
            return;
        }

        await this.redis.hset(`user:${ctx.from!.id}`, 'started', 1);
        await this.redis.lpush('bot:started', ctx.from!.id);
        await ctx.reply('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    }

    public async pause(ctx: Context): Promise<void> {
        if (!ctx.from?.id) {
            this.logger.error(ctx, '–ù–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            await ctx.reply('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
            return;
        }

        await this.redis.hset(`user:${ctx.from!.id}`, 'started', 0);
        await this.redis.lpop('bot:started', ctx.from!.id);
        await ctx.reply('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    public async info(ctx: Context): Promise<void> {
        if (!ctx.from?.id) {
            this.logger.error(ctx, '–ù–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            await ctx.reply('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
            return;
        }

        await ctx.reply(`Started: ${await this.isStarted(ctx.from!.id)}`);
    }

    public async sendMessage(chatId: number | string, text: string, extra?: ExtraReplyMessage) {
        await this.bot.telegram.sendMessage(chatId, text, extra);
    }
}

let telegramBot: TelegramBotService;

await app.booted(async () => {
    telegramBot = await app.container.make('telegramBot', [0]);
});

export { telegramBot as default };
